// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  firstName     String
  lastName      String
  email         String         @unique
  password      String
  avatar        String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  Questionnaire Questionnaire?
}

enum Role {
  USER
  ADMIN
}


enum AgeRatings {
  THREE
  SEVEN
  TWELVE
  SIXTEEN
  EIGHTEEN
  }


enum GamePlayPreference {
  SinglePlayer
  MultiPlayer
}

model Questionnaire {
  id                 String             @id @default(cuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdult            Boolean
  gamePlayPreference GamePlayPreference
  favoriteGenres     Genre[]

}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

model Product {
  id          String  @id @default(cuid())
  title       String
  description String  @db.Text
  price       Decimal @db.Decimal(10, 2)
  imageUrls   Json
  rating      Decimal @db.Decimal(3, 2)
  releaseYear Int
  developer   String
  genreId     String
  genre      Genre       @relation(fields: [genreId], references: [id], onDelete: Cascade)
  ageRating AgeRatings @default(THREE)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  stock       Int       @default(0)
  stockStatus StockStatus @default(IN_STOCK)
  inventoryLogs InventoryLog[]
}

model Genre {
  id              String         @id @default(cuid())
  name            String         @unique
  products        Product[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     OrderStatus
  totalPrice Decimal     @db.Decimal(10, 2)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
}

enum InventoryChangeType {
  STOCK_ADDED
  STOCK_REMOVED
  ORDER_PLACED
  ORDER_CANCELLED
}

model InventoryLog {
  id        String   @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  changeType InventoryChangeType
  quantity  Int
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id         String   @id @default(cuid())
  content    String   @db.Text
  rating     Int
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  helpful    Int      @default(0)
  notHelpful Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String  
  contactNumber String
  message     String   @db.Text
  createdAt   DateTime @default(now())
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}
